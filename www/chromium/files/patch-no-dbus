--- build/config/ui.gni.orig    2019-02-21 18:21:57.092508000 +0000
+++ build/config/ui.gni 2019-02-21 18:22:26.969888000 +0000
@@ -52,7 +52,7 @@
 }
 
 # Whether to use atk, the Accessibility ToolKit library
-use_atk = is_desktop_linux && use_x11
+use_atk = false
 # =============================================
 #   PLEASE DO NOT ADD MORE FLAGS TO THIS FILE
 # =============================================
--- chrome/browser/BUILD.gn.orig        2018-12-12 21:56:02.000000000 +0000
+++ chrome/browser/BUILD.gn     2019-02-21 17:33:55.943026000 +0000
@@ -3480,18 +3480,23 @@
   if (is_desktop_linux) {
     # Desktop linux, doesn't count ChromeOS.
     sources += [
-      "dbus/dbus_thread_linux.cc",
-      "dbus/dbus_thread_linux.h",
       "first_run/upgrade_util.cc",
       "first_run/upgrade_util_linux.cc",
       "first_run/upgrade_util_linux.h",
       "icon_loader_auralinux.cc",
-      "password_manager/native_backend_kwallet_x.cc",
-      "password_manager/native_backend_kwallet_x.h",
       "platform_util_linux.cc",
       "shell_integration_linux.cc",
       "shell_integration_linux.h",
     ]
+
+    if (use_dbus) {
+    sources += [
+      "dbus/dbus_thread_linux.cc",
+      "dbus/dbus_thread_linux.h",
+      "password_manager/native_backend_kwallet_x.cc",
+      "password_manager/native_backend_kwallet_x.h",
+    ]
+    }

     if (enable_native_notifications) {
       sources += [
--- services/device/wake_lock/power_save_blocker/BUILD.gn.origz	2018-05-04 21:11:06.986768000 +0000
+++ services/device/wake_lock/power_save_blocker/BUILD.gn	2018-05-04 21:12:05.107165000 +0000
@@ -62,6 +62,9 @@
   if (is_chromeos || !use_x11 || !use_dbus) {
     sources -= [ "power_save_blocker_x11.cc" ]
   }
+  if (!is_chromeos && use_x11 && !use_dbus) {
+    sources += [ "power_save_blocker_ozone.cc" ]
+  }
 
   if (is_android) {
     deps += [ ":jni_headers" ]
--- services/device/battery/battery_status_manager_default.cc.origz	2018-05-04 20:46:56.898376000 +0000
+++ services/device/battery/battery_status_manager_default.cc	2018-05-04 20:47:49.706664000 +0000
@@ -23,11 +23,10 @@
  private:
   // BatteryStatusManager:
   bool StartListeningBatteryChange() override {
-    NOTIMPLEMENTED();
     return false;
   }
 
-  void StopListeningBatteryChange() override { NOTIMPLEMENTED(); }
+  void StopListeningBatteryChange() override { }
 
   DISALLOW_COPY_AND_ASSIGN(BatteryStatusManagerDefault);
 };
--- chrome/browser/password_manager/password_store_factory.cc.origz	2018-05-04 21:12:42.459787000 +0000
+++ chrome/browser/password_manager/password_store_factory.cc	2018-05-04 21:14:18.767015000 +0000
@@ -191,6 +191,7 @@
   std::unique_ptr<PasswordStoreX::NativeBackend> backend;
   if (selected_backend == os_crypt::SelectedLinuxBackend::KWALLET ||
       selected_backend == os_crypt::SelectedLinuxBackend::KWALLET5) {
+#if defined(USE_DBUS)
     VLOG(1) << "Trying KWallet for password storage.";
     base::nix::DesktopEnvironment used_desktop_env =
         selected_backend == os_crypt::SelectedLinuxBackend::KWALLET
@@ -203,6 +204,7 @@
     } else {
       backend.reset();
     }
+#endif  // defined(USE_DBUS)
   } else if (selected_backend == os_crypt::SelectedLinuxBackend::GNOME_ANY ||
              selected_backend ==
                  os_crypt::SelectedLinuxBackend::GNOME_KEYRING ||
--- extensions/browser/api/networking_private/networking_private_linux.h.origz	2018-05-04 20:48:02.150443000 +0000
+++ extensions/browser/api/networking_private/networking_private_linux.h	2018-05-04 20:50:40.282990000 +0000
@@ -16,22 +16,26 @@
 #include "components/keyed_service/core/keyed_service.h"
 #include "extensions/browser/api/networking_private/networking_private_delegate.h"
 
+#if defined(DBUS)
 namespace dbus {
 class Bus;
 class ObjectPath;
 class ObjectProxy;
 class Response;
 };
+#endif
 
 namespace extensions {
 
 // Linux NetworkingPrivateDelegate implementation.
 class NetworkingPrivateLinux : public NetworkingPrivateDelegate {
  public:
+#if defined(DBUS)
   using NetworkMap =
       std::map<base::string16, std::unique_ptr<base::DictionaryValue>>;
 
   typedef std::vector<std::string> GuidList;
+#endif
 
   NetworkingPrivateLinux();
 
@@ -108,6 +112,7 @@
   void RemoveObserver(NetworkingPrivateDelegateObserver* observer) override;
 
  private:
+#if defined(DBUS)
   ~NetworkingPrivateLinux() override;
 
   // https://developer.gnome.org/NetworkManager/unstable/spec.html#type-NM_DEVICE_TYPE
@@ -276,6 +281,7 @@
   base::ObserverList<NetworkingPrivateDelegateObserver>
       network_events_observers_;
 
+#endif
   DISALLOW_COPY_AND_ASSIGN(NetworkingPrivateLinux);
 };
 
--- extensions/browser/api/networking_private/BUILD.gn.origz    2018-09-11 20:27:37.056726000 +0000
+++ extensions/browser/api/networking_private/BUILD.gn  2018-09-11 20:31:22.661972000 +0000
@@ -35,7 +35,7 @@
     "//extensions/browser:browser_sources",
   ]
 
-  if (!is_chromeos && is_linux && use_dbus) {
+  if (!is_chromeos && is_linux) {
     sources = default_sources + [
                 "network_config_dbus_constants_linux.cc",
                 "network_config_dbus_constants_linux.h",

--- extensions/browser/api/networking_private/networking_private_linux.cc.orig	2018-08-08 19:10:57.000000000 +0000
+++ extensions/browser/api/networking_private/networking_private_linux.cc	2018-09-12 22:09:01.946345000 +0000
@@ -15,10 +15,12 @@
 #include "base/strings/utf_string_conversions.h"
 #include "components/onc/onc_constants.h"
 #include "content/public/browser/browser_thread.h"
+#if defined (USE_DBUS)
 #include "dbus/bus.h"
 #include "dbus/message.h"
 #include "dbus/object_path.h"
 #include "dbus/object_proxy.h"
+#endif
 #include "extensions/browser/api/networking_private/network_config_dbus_constants_linux.h"
 #include "extensions/browser/api/networking_private/networking_private_api.h"
 #include "extensions/browser/api/networking_private/networking_private_delegate_observer.h"
@@ -28,6 +30,7 @@
 namespace extensions {
 
 namespace {
+#if defined(USE_DBUS)
 // Access Point info strings.
 const char kAccessPointInfoName[] = "Name";
 const char kAccessPointInfoGuid[] = "GUID";
@@ -94,6 +97,7 @@
                                  const std::string& ssid) {
   return device_path.value() + "|" + access_point_path.value() + "|" + ssid;
 }
+#endif
 
 // Logs that the method is not implemented and reports |kErrorNotSupported|
 // to the failure callback.
@@ -104,6 +108,7 @@
   failure_callback.Run(extensions::networking_private::kErrorNotSupported);
 }
 
+#if defined(USE_DBUS)
 // Fires the appropriate callback when the network connect operation succeeds
 // or fails.
 void OnNetworkConnectOperationCompleted(
@@ -130,9 +135,11 @@
   }
   success_callback.Run(std::move(properties));
 }
+#endif
 
 }  // namespace
 
+#if defined(USE_DBUS)
 NetworkingPrivateLinux::NetworkingPrivateLinux()
     : dbus_thread_("Networking Private DBus"), network_manager_proxy_(NULL) {
   base::Thread::Options thread_options(base::MessageLoop::Type::TYPE_IO, 0);
@@ -142,7 +149,12 @@
       FROM_HERE,
       base::Bind(&NetworkingPrivateLinux::Initialize, base::Unretained(this)));
 }
+#else
+NetworkingPrivateLinux::NetworkingPrivateLinux() {
+}
+#endif
 
+#if defined(USE_DBUS)
 NetworkingPrivateLinux::~NetworkingPrivateLinux() {
   dbus_thread_.Stop();
 }
@@ -182,12 +194,17 @@
 
   return true;
 }
+#endif
 
 void NetworkingPrivateLinux::GetProperties(
     const std::string& guid,
     const DictionaryCallback& success_callback,
     const FailureCallback& failure_callback) {
+#if defined(USE_DBUS)
   GetState(guid, success_callback, failure_callback);
+#else
+    ReportNotSupported("NetworkManager over DBus", failure_callback);
+#endif
 }
 
 void NetworkingPrivateLinux::GetManagedProperties(
@@ -201,6 +218,7 @@
     const std::string& guid,
     const DictionaryCallback& success_callback,
     const FailureCallback& failure_callback) {
+#if defined(USE_DBUS)
   if (!CheckNetworkManagerSupported(failure_callback))
     return;
 
@@ -220,8 +238,12 @@
       base::Bind(&GetCachedNetworkPropertiesCallback, base::Passed(&error),
                  base::Passed(&network_properties), success_callback,
                  failure_callback));
+#else
+    ReportNotSupported("NetworkManager over DBus", failure_callback);
+#endif
 }
 
+#if defined(USE_DBUS)
 void NetworkingPrivateLinux::GetCachedNetworkProperties(
     const std::string& guid,
     base::DictionaryValue* properties,
@@ -248,6 +270,7 @@
   // Swap the new copy into the dictionary that is shared with the reply.
   properties->Swap(temp_properties.get());
 }
+#endif
 
 void NetworkingPrivateLinux::SetProperties(
     const std::string& guid,
@@ -282,6 +305,7 @@
     int limit,
     const NetworkListCallback& success_callback,
     const FailureCallback& failure_callback) {
+#if defined(USE_DBUS)
   if (!CheckNetworkManagerSupported(failure_callback)) {
     return;
   }
@@ -308,8 +332,12 @@
       base::Bind(&NetworkingPrivateLinux::OnAccessPointsFound,
                  base::Unretained(this), base::Passed(&network_map),
                  success_callback, failure_callback));
+#else
+    ReportNotSupported("NetworkManager over DBus", failure_callback);
+#endif
 }
 
+#if defined(USE_DBUS)
 bool NetworkingPrivateLinux::GetNetworksForScanRequest() {
   if (!network_manager_proxy_) {
     return false;
@@ -497,11 +525,13 @@
     *error = "Failed to disconnect network";
   }
 }
+#endif
 
 void NetworkingPrivateLinux::StartConnect(
     const std::string& guid,
     const VoidCallback& success_callback,
     const FailureCallback& failure_callback) {
+#if defined(USE_DBUS)
   if (!CheckNetworkManagerSupported(failure_callback))
     return;
 
@@ -515,12 +545,16 @@
                  base::Unretained(this), guid, base::Unretained(error_ptr)),
       base::Bind(&OnNetworkConnectOperationCompleted, base::Passed(&error),
                  success_callback, failure_callback));
+#else
+    ReportNotSupported("NetworkManager over DBus", failure_callback);
+#endif
 }
 
 void NetworkingPrivateLinux::StartDisconnect(
     const std::string& guid,
     const VoidCallback& success_callback,
     const FailureCallback& failure_callback) {
+#if defined(USE_DBUS)
   if (!CheckNetworkManagerSupported(failure_callback))
     return;
 
@@ -534,6 +568,9 @@
                  base::Unretained(this), guid, base::Unretained(error_ptr)),
       base::Bind(&OnNetworkConnectOperationCompleted, base::Passed(&error),
                  success_callback, failure_callback));
+#else
+    ReportNotSupported("NetworkManager over DBus", failure_callback);
+#endif
 }
 
 void NetworkingPrivateLinux::SetWifiTDLSEnabledState(
@@ -622,19 +659,28 @@
 }
 
 bool NetworkingPrivateLinux::RequestScan(const std::string& /* type */) {
+#if defined(USE_DBUS)
   return GetNetworksForScanRequest();
+#else
+    return false;
+#endif
 }
 
 void NetworkingPrivateLinux::AddObserver(
     NetworkingPrivateDelegateObserver* observer) {
+#if defined(USE_DBUS)
   network_events_observers_.AddObserver(observer);
+#endif
 }
 
 void NetworkingPrivateLinux::RemoveObserver(
     NetworkingPrivateDelegateObserver* observer) {
+#if defined(USE_DBUS)
   network_events_observers_.RemoveObserver(observer);
+#endif
 }
 
+#if defined(USE_DBUS)
 void NetworkingPrivateLinux::OnAccessPointsFound(
     std::unique_ptr<NetworkMap> network_map,
     const NetworkListCallback& success_callback,
@@ -1226,5 +1272,6 @@
   DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
   OnNetworksChangedEventOnUIThread(*guid_list);
 }
+#endif
 
 }  // namespace extensions
--- ui/views/widget/desktop_aura/desktop_window_tree_host_x11.cc.orig	2019-03-13 15:39:21.831025000 +0000
+++ ui/views/widget/desktop_aura/desktop_window_tree_host_x11.cc	2019-03-13 15:45:06.962655000 +0000
@@ -17,7 +17,7 @@
 #include "base/threading/thread_task_runner_handle.h"
 #include "base/trace_event/trace_event.h"
 #include "third_party/skia/include/core/SkPath.h"
-#include "ui/accessibility/platform/atk_util_auralinux.h"
+//#include "ui/accessibility/platform/atk_util_auralinux.h"
 #include "ui/aura/client/aura_constants.h"
 #include "ui/aura/client/cursor_client.h"
 #include "ui/aura/client/focus_client.h"
@@ -2048,11 +2048,11 @@
       break;
     }
     case KeyPress: {
-      if (ui::AtkUtilAuraLinux::HandleKeyEvent(xev) !=
-          ui::DiscardAtkKeyEvent::Discard) {
+//      if (ui::AtkUtilAuraLinux::HandleKeyEvent(xev) !=
+//          ui::DiscardAtkKeyEvent::Discard) {
         ui::KeyEvent keydown_event(xev);
         DispatchKeyEvent(&keydown_event);
-      }
+//      }
       break;
     }
     case KeyRelease: {
@@ -2061,11 +2061,11 @@
       if (!IsActive() && !HasCapture())
         break;
 
-      if (ui::AtkUtilAuraLinux::HandleKeyEvent(xev) !=
-          ui::DiscardAtkKeyEvent::Discard) {
+//      if (ui::AtkUtilAuraLinux::HandleKeyEvent(xev) !=
+//          ui::DiscardAtkKeyEvent::Discard) {
         ui::KeyEvent key_event(xev);
         DispatchKeyEvent(&key_event);
-      }
+//      }
       break;
     }
     case ButtonPress:
